required no mocked when expect static
---- mockito elimination ----
__ -> when(<M>).thenThrow(<...>)
__ -> whenNew(<C>)<...>
        inject spy -> <?>
71 -> spy(...)
        doNothing on spy -> just recall
        mock + spy at the same time -> <?>
48 -> doNothing().when(<C>, "privateMethod", <paramMatchers>)
27 -> doThrow(<Ex>).when(<Instance>).<M>
23 -> doReturn(<...>).when(<i>).<M>
18 -> doReturn(...).when(..., "privateMethod", <paramMatchers>)
15 -> eq(<...>
14 -> argThat(<...>
11 -> when(<i>, "privateMethod").thenReturn(<...>)
10 -> MockUtil.verifyStaticCall(<...>)
10 -> verifyZeroInteractions(<C>)
 9 -> suppress(...)
 9 -> when(<M>).thenCallRealMethod()
 8 -> when(<C>, "privateMethod", <paramMatchers>).thenReturn(...)
 8 -> anyMap()
 8 -> verify(<...>
 7 -> isNull()
 7 -> verifyNew(<C>, <...>
 6 -> doThrow(<Ex>).when(<C>, "privateMethod", <paramMatchers>)
 6 -> anyInt()
 5 -> doAnswer(<...>
 5 -> mock(<C>)
 5 -> verifyNoMoreInteractions(<C>)
 3 -> doThrow(<Ex>).when(<...>).<M>
 3 -> assert<...>(<...><paramMatchers><...>)
 2 -> multiple recall after verify
 2 -> MockitoAnnotations.initMocks(<...>)
 1 -> stub(<...>)
 1 -> doThrow(<Ex>).when(<C>)
 1 -> doThrow(<Ex>).when(<Instance>, "privateMethod", <paramMatchers>)
 1 -> mock(<...>)
 1 -> verifyPrivate(<...>
 1 -> when(<...>).thenAnswer(<...>
 1 -> when(..., "privateMethod", <paramMatchers>).thenThrow(<...>)
468 <<=- in total

---- others ----
377 -> MockUtil.verifyObjectUsage
 20 -> capture()

---- wood.log issue at 30.08.2019 ----
156 -> [1013]WL ... ->> : Cannot find concrete type of ...
028 -> [1012]WL ... ->> : Found non-class argument for mockStatic call
011 -> [1013]WL ... ->> : Cannot find type of 'some subject' !
003 -> [1013]WL ... ->> : Found type com.github.javaparser.ast.type.ArrayType that not support yet
002 -> [1012]WL ... ->> : Unsupported fact in call: [ADD_REPLACEMENT_LETTER_POLICY_BUTTON_ID] -> [<fact>  counter]
001 -> [1012]WL ... ->> : Found non-class argument for mock call
001 -> [1013]WL ... ->> : Found no recall in [ ... ] for [ ... ]

