> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :run
   > package TestTransformer;

import org.junit.*;
import static org.junit.Assert.*;
import mockit.*;
import subject.*;

public class AlterTest {

    @Mocked
    NonStaticSubject rss;

    @Test
    public void test_mock_alternative_way(@Mocked NonStaticSubject nss, @Mocked StaticSubject ss) {
        int[] noRefunCounter = new int[1];
        int[] getRefunCounter = new int[1];
        new Expectations() {

            {
                nss.val();
                result = 1928;
                nss.lift();
                result = 30;
                StaticSubject.getRefun();
                result = 9;
            }
        };
        App t = new App();
        assertEquals(t.getVal(), 9 + 1928 + 30);
        // assertEquals(1, getRefunCounter[0]);
        // assertEquals(1, noRefunCounter[0]);
        new Verifications() {

            {
                nss.val();
                times = 1;
                nss.noReturn();
                times = 1;
                NonStaticSubject.create(anyInt);
                times = 1;
                StaticSubject.getRefun();
                times = 1;
                StaticSubject.noRefun();
                times = 1;
            }
        };
    }
}
 :: class com.github.javaparser.ast.CompilationUnit<<<<
   >   > package TestTransformer;

 :: class com.github.javaparser.ast.PackageDeclaration<<<<
   >   >   > TestTransformer :: class com.github.javaparser.ast.expr.Name<<<<
   >   > import org.junit.*;
 :: class com.github.javaparser.ast.ImportDeclaration<<<<
   >   >   > org.junit :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   > org :: class com.github.javaparser.ast.expr.Name<<<<
   >   > import static org.junit.Assert.*;
 :: class com.github.javaparser.ast.ImportDeclaration<<<<
   >   >   > org.junit.Assert :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   > org.junit :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   >   > org :: class com.github.javaparser.ast.expr.Name<<<<
   >   > import mockit.*;
 :: class com.github.javaparser.ast.ImportDeclaration<<<<
   >   >   > mockit :: class com.github.javaparser.ast.expr.Name<<<<
   >   > import subject.*;
 :: class com.github.javaparser.ast.ImportDeclaration<<<<
   >   >   > subject :: class com.github.javaparser.ast.expr.Name<<<<
   >   > public class AlterTest {

    @Mocked
    NonStaticSubject rss;

    @Test
    public void test_mock_alternative_way(@Mocked NonStaticSubject nss, @Mocked StaticSubject ss) {
        int[] noRefunCounter = new int[1];
        int[] getRefunCounter = new int[1];
        new Expectations() {

            {
                nss.val();
                result = 1928;
                nss.lift();
                result = 30;
                StaticSubject.getRefun();
                result = 9;
            }
        };
        App t = new App();
        assertEquals(t.getVal(), 9 + 1928 + 30);
        // assertEquals(1, getRefunCounter[0]);
        // assertEquals(1, noRefunCounter[0]);
        new Verifications() {

            {
                nss.val();
                times = 1;
                nss.noReturn();
                times = 1;
                NonStaticSubject.create(anyInt);
                times = 1;
                StaticSubject.getRefun();
                times = 1;
                StaticSubject.noRefun();
                times = 1;
            }
        };
    }
} :: class com.github.javaparser.ast.body.ClassOrInterfaceDeclaration<<<<
   >   >   > public  :: class com.github.javaparser.ast.Modifier<<<<
   >   >   > AlterTest :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   > @Mocked
NonStaticSubject rss; :: class com.github.javaparser.ast.body.FieldDeclaration<<<<
   >   >   >   > @Mocked :: class com.github.javaparser.ast.expr.MarkerAnnotationExpr<<<<
   >   >   >   >   > Mocked :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   > rss :: class com.github.javaparser.ast.body.VariableDeclarator<<<<
   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   > rss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   > @Test
public void test_mock_alternative_way(@Mocked NonStaticSubject nss, @Mocked StaticSubject ss) {
    int[] noRefunCounter = new int[1];
    int[] getRefunCounter = new int[1];
    new Expectations() {

        {
            nss.val();
            result = 1928;
            nss.lift();
            result = 30;
            StaticSubject.getRefun();
            result = 9;
        }
    };
    App t = new App();
    assertEquals(t.getVal(), 9 + 1928 + 30);
    // assertEquals(1, getRefunCounter[0]);
    // assertEquals(1, noRefunCounter[0]);
    new Verifications() {

        {
            nss.val();
            times = 1;
            nss.noReturn();
            times = 1;
            NonStaticSubject.create(anyInt);
            times = 1;
            StaticSubject.getRefun();
            times = 1;
            StaticSubject.noRefun();
            times = 1;
        }
    };
} :: class com.github.javaparser.ast.body.MethodDeclaration<<<<
   >   >   >   > @Test :: class com.github.javaparser.ast.expr.MarkerAnnotationExpr<<<<
   >   >   >   >   > Test :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   > public  :: class com.github.javaparser.ast.Modifier<<<<
   >   >   >   > test_mock_alternative_way :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   > @Mocked NonStaticSubject nss :: class com.github.javaparser.ast.body.Parameter<<<<
   >   >   >   >   > @Mocked :: class com.github.javaparser.ast.expr.MarkerAnnotationExpr<<<<
   >   >   >   >   >   > Mocked :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   > @Mocked StaticSubject ss :: class com.github.javaparser.ast.body.Parameter<<<<
   >   >   >   >   > @Mocked :: class com.github.javaparser.ast.expr.MarkerAnnotationExpr<<<<
   >   >   >   >   >   > Mocked :: class com.github.javaparser.ast.expr.Name<<<<
   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   > ss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   > void :: class com.github.javaparser.ast.type.VoidType<<<<
   >   >   >   > {
    int[] noRefunCounter = new int[1];
    int[] getRefunCounter = new int[1];
    new Expectations() {

        {
            nss.val();
            result = 1928;
            nss.lift();
            result = 30;
            StaticSubject.getRefun();
            result = 9;
        }
    };
    App t = new App();
    assertEquals(t.getVal(), 9 + 1928 + 30);
    // assertEquals(1, getRefunCounter[0]);
    // assertEquals(1, noRefunCounter[0]);
    new Verifications() {

        {
            nss.val();
            times = 1;
            nss.noReturn();
            times = 1;
            NonStaticSubject.create(anyInt);
            times = 1;
            StaticSubject.getRefun();
            times = 1;
            StaticSubject.noRefun();
            times = 1;
        }
    };
} :: class com.github.javaparser.ast.stmt.BlockStmt<<<<
   >   >   >   >   > int[] noRefunCounter = new int[1]; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > int[] noRefunCounter = new int[1] :: class com.github.javaparser.ast.expr.VariableDeclarationExpr<<<<
   >   >   >   >   >   >   > noRefunCounter = new int[1] :: class com.github.javaparser.ast.body.VariableDeclarator<<<<
   >   >   >   >   >   >   >   > int[] :: class com.github.javaparser.ast.type.ArrayType<<<<
   >   >   >   >   >   >   >   >   > int :: class com.github.javaparser.ast.type.PrimitiveType<<<<
   >   >   >   >   >   >   >   > noRefunCounter :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   > new int[1] :: class com.github.javaparser.ast.expr.ArrayCreationExpr<<<<
   >   >   >   >   >   >   >   >   > int :: class com.github.javaparser.ast.type.PrimitiveType<<<<
   >   >   >   >   >   >   >   >   > [1] :: class com.github.javaparser.ast.ArrayCreationLevel<<<<
   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   > int[] getRefunCounter = new int[1]; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > int[] getRefunCounter = new int[1] :: class com.github.javaparser.ast.expr.VariableDeclarationExpr<<<<
   >   >   >   >   >   >   > getRefunCounter = new int[1] :: class com.github.javaparser.ast.body.VariableDeclarator<<<<
   >   >   >   >   >   >   >   > int[] :: class com.github.javaparser.ast.type.ArrayType<<<<
   >   >   >   >   >   >   >   >   > int :: class com.github.javaparser.ast.type.PrimitiveType<<<<
   >   >   >   >   >   >   >   > getRefunCounter :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   > new int[1] :: class com.github.javaparser.ast.expr.ArrayCreationExpr<<<<
   >   >   >   >   >   >   >   >   > int :: class com.github.javaparser.ast.type.PrimitiveType<<<<
   >   >   >   >   >   >   >   >   > [1] :: class com.github.javaparser.ast.ArrayCreationLevel<<<<
   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   > new Expectations() {

    {
        nss.val();
        result = 1928;
        nss.lift();
        result = 30;
        StaticSubject.getRefun();
        result = 9;
    }
}; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > new Expectations() {

    {
        nss.val();
        result = 1928;
        nss.lift();
        result = 30;
        StaticSubject.getRefun();
        result = 9;
    }
} :: class com.github.javaparser.ast.expr.ObjectCreationExpr<<<<
   >   >   >   >   >   >   > Expectations :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   >   >   > Expectations :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   > {
    nss.val();
    result = 1928;
    nss.lift();
    result = 30;
    StaticSubject.getRefun();
    result = 9;
} :: class com.github.javaparser.ast.body.InitializerDeclaration<<<<
   >   >   >   >   >   >   >   > {
    nss.val();
    result = 1928;
    nss.lift();
    result = 30;
    StaticSubject.getRefun();
    result = 9;
} :: class com.github.javaparser.ast.stmt.BlockStmt<<<<
   >   >   >   >   >   >   >   >   > nss.val(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > nss.val() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > val :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > result = 1928; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > result = 1928 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1928 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > nss.lift(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > nss.lift() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > lift :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > result = 30; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > result = 30 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 30 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > StaticSubject.getRefun(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > StaticSubject.getRefun() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > getRefun :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > result = 9; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > result = 9 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > result :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 9 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   > App t = new App(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > App t = new App() :: class com.github.javaparser.ast.expr.VariableDeclarationExpr<<<<
   >   >   >   >   >   >   > t = new App() :: class com.github.javaparser.ast.body.VariableDeclarator<<<<
   >   >   >   >   >   >   >   > App :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   >   >   >   > App :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   > t :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   > new App() :: class com.github.javaparser.ast.expr.ObjectCreationExpr<<<<
   >   >   >   >   >   >   >   >   > App :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   >   >   >   >   > App :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   > assertEquals(t.getVal(), 9 + 1928 + 30); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > assertEquals(t.getVal(), 9 + 1928 + 30) :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   > assertEquals :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   > t.getVal() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   > t :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   > t :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   > getVal :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   > 9 + 1928 + 30 :: class com.github.javaparser.ast.expr.BinaryExpr<<<<
   >   >   >   >   >   >   >   > 9 + 1928 :: class com.github.javaparser.ast.expr.BinaryExpr<<<<
   >   >   >   >   >   >   >   >   > 9 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > 1928 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   > 30 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   > // assertEquals(1, getRefunCounter[0]);
// assertEquals(1, noRefunCounter[0]);
new Verifications() {

    {
        nss.val();
        times = 1;
        nss.noReturn();
        times = 1;
        NonStaticSubject.create(anyInt);
        times = 1;
        StaticSubject.getRefun();
        times = 1;
        StaticSubject.noRefun();
        times = 1;
    }
}; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   > new Verifications() {

    {
        nss.val();
        times = 1;
        nss.noReturn();
        times = 1;
        NonStaticSubject.create(anyInt);
        times = 1;
        StaticSubject.getRefun();
        times = 1;
        StaticSubject.noRefun();
        times = 1;
    }
} :: class com.github.javaparser.ast.expr.ObjectCreationExpr<<<<
   >   >   >   >   >   >   > Verifications :: class com.github.javaparser.ast.type.ClassOrInterfaceType<<<<
   >   >   >   >   >   >   >   > Verifications :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   > {
    nss.val();
    times = 1;
    nss.noReturn();
    times = 1;
    NonStaticSubject.create(anyInt);
    times = 1;
    StaticSubject.getRefun();
    times = 1;
    StaticSubject.noRefun();
    times = 1;
} :: class com.github.javaparser.ast.body.InitializerDeclaration<<<<
   >   >   >   >   >   >   >   > {
    nss.val();
    times = 1;
    nss.noReturn();
    times = 1;
    NonStaticSubject.create(anyInt);
    times = 1;
    StaticSubject.getRefun();
    times = 1;
    StaticSubject.noRefun();
    times = 1;
} :: class com.github.javaparser.ast.stmt.BlockStmt<<<<
   >   >   >   >   >   >   >   >   > nss.val(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > nss.val() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > val :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > times = 1; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > times = 1 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > nss.noReturn(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > nss.noReturn() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > nss :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > noReturn :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > times = 1; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > times = 1 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > NonStaticSubject.create(anyInt); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > NonStaticSubject.create(anyInt) :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > NonStaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > create :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > anyInt :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > anyInt :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > times = 1; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > times = 1 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > StaticSubject.getRefun(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > StaticSubject.getRefun() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > getRefun :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > times = 1; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > times = 1 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   >   >   >   >   > StaticSubject.noRefun(); :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > StaticSubject.noRefun() :: class com.github.javaparser.ast.expr.MethodCallExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > StaticSubject :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > noRefun :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   > times = 1; :: class com.github.javaparser.ast.stmt.ExpressionStmt<<<<
   >   >   >   >   >   >   >   >   >   > times = 1 :: class com.github.javaparser.ast.expr.AssignExpr<<<<
   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.NameExpr<<<<
   >   >   >   >   >   >   >   >   >   >   >   > times :: class com.github.javaparser.ast.expr.SimpleName<<<<
   >   >   >   >   >   >   >   >   >   >   > 1 :: class com.github.javaparser.ast.expr.IntegerLiteralExpr<<<<
   >   >   >   >   > // assertEquals(1, getRefunCounter[0]);
 :: class com.github.javaparser.ast.comments.LineComment<<<<
   >   >   >   >   > // assertEquals(1, noRefunCounter[0]);
 :: class com.github.javaparser.ast.comments.LineComment<<<<

BUILD SUCCESSFUL in 1s
2 actionable tasks: 1 executed, 1 up-to-date
